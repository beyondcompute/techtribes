# TypeScript Patterns for Techtribes

## No comments

No comments are included in the code.

## Simple variable names

The variable names are as short as possible, usually consisting of one or two full words.

## No Oxford commas

Oxford commas are not used in any of the text output to the user.

## Scraper Architecture

All scrapers in [src/scrapers/](mdc:src/scrapers/) follow a consistent pattern:

- Export a default function that takes a URL and returns scraped data
- Return data in the format: `{ event: { date, link }, members? }`
- Handle errors gracefully with try-catch blocks
- Use async/await for HTTP requests

## Data Types

Community objects have this structure:

```typescript
{
  name: string;
  location: string;
  tags: string[];
  events: string;
  site?: string;
  logo: string;
  json?: string;
}
```

## Sorting Logic

The main scraping logic in [src/scrape.ts](mdc:src/scrape.ts) implements smart sorting:

- **Upcoming events**: Sorted chronologically (earliest upcoming event first)
- **Past events**: Sorted in reverse chronological order (most recent past event first)
- **Final output**: Upcoming events first, then past events
- Events older than 1 year are filtered out as inactive

## Error Handling

- Use `console.warn()` for scraping errors in [src/scrape.ts](mdc:src/scrape.ts)
- Return early on failures rather than throwing errors
- Log community names with errors for debugging

## File Operations

- Use `fs.promises` for async file operations
- Read from [data/communities.yml](mdc:data/communities.yml)
- Write output to `site/_data/output.yml`
- Use YAML for data serialization with `js-yaml`
  description:
  globs:
  alwaysApply: false

---
